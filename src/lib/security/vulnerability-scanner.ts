import { useState, useEffect } from 'react';
import React from 'react';

export interface Vulnerability {
  id: string;
  title: string;
  packageName: string;
  severity: 'critical' | 'high' | 'medium' | 'low';
  fixedIn?: string;
  description: string;
}

export interface ScanResult {
  vulnerabilities: Vulnerability[];
  summary: {
    total: number;
    critical: number;
    high: number;
    medium: number;
    low: number;
  };
  timestamp: string;
}

export const useVulnerabilityScanner = () => {
  const [scanning, setScanning] = useState(false);
  const [results, setResults] = useState<ScanResult | null>(null);

  const startScan = async () => {
    setScanning(true);
    
    // Simulate scanning process
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // Mock results for demo
    const mockResults: ScanResult = {
      vulnerabilities: [],
      summary: {
        total: 0,
        critical: 0,
        high: 0,
        medium: 0,
        low: 0
      },
      timestamp: new Date().toISOString()
    };
    
    setResults(mockResults);
    setScanning(false);
  };

  return {
    scanning,
    results,
    startScan,
  };
};

// Mock components for testing
export const VulnerabilityAlert = ({ vulnerability }: { vulnerability: Vulnerability }) => {
  return React.createElement('div', { className: 'vulnerability-alert' }, vulnerability.title);
};

export const ScanProgressIndicator = ({ progress }: { progress: number }) => {
  return React.createElement('div', { className: 'progress-indicator' }, `${progress}%`);
};
