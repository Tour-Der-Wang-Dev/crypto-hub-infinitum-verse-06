
import { toast } from "@/components/ui/use-toast";

interface SnykVulnerability {
  id: string;
  title: string;
  packageName: string;
  severity: string;
  packageVersion?: string;
  fixedIn?: string;
  description?: string;
  exploit?: string;
  references?: string[];
}

interface SnykApiResponse {
  success: boolean;
  vulnerabilities?: SnykVulnerability[];
  error?: string;
}

/**
 * Fetch vulnerability data from Snyk API
 * In production, this would be called via a backend API to protect the API key
 */
export const fetchVulnerabilities = async (): Promise<SnykApiResponse> => {
  try {
    // In a real application, this would be fetched from a secure backend
    // This is just for demonstration
    const mockResponse: SnykApiResponse = {
      success: true,
      vulnerabilities: [
        {
          id: "SNYK-JS-AXIOS-1038255",
          title: "Server-Side Request Forgery (SSRF)",
          packageName: "axios",
          packageVersion: "0.21.1",
          severity: "high",
          fixedIn: "0.21.2",
          description: "Axios is vulnerable to Server-Side Request Forgery (SSRF) when used on the server side."
        },
        {
          id: "SNYK-JS-REACT-174645",
          title: "Cross-site Scripting (XSS)",
          packageName: "react-dom",
          packageVersion: "16.8.0",
          severity: "medium",
          fixedIn: "16.8.1",
          description: "React DOM allows for the execution of arbitrary code due to improper validation."
        }
      ]
    };
    
    // Simulate API call
    return new Promise((resolve) => {
      setTimeout(() => resolve(mockResponse), 1500);
    });
  } catch (error) {
    console.error("Error fetching vulnerability data:", error);
    toast({
      variant: "destructive",
      title: "Security Scan Failed",
      description: "Failed to fetch vulnerability data. Please try again later.",
    });
    return { success: false, error: "API request failed" };
  }
};

/**
 * Process vulnerability data into a summary format
 */
export const processVulnerabilityData = (
  vulnerabilities: SnykVulnerability[]
): {
  critical: number;
  high: number;
  medium: number;
  low: number;
} => {
  return vulnerabilities.reduce(
    (acc, vuln) => {
      switch (vuln.severity) {
        case "critical":
          acc.critical += 1;
          break;
        case "high":
          acc.high += 1;
          break;
        case "medium":
          acc.medium += 1;
          break;
        case "low":
          acc.low += 1;
          break;
      }
      return acc;
    },
    { critical: 0, high: 0, medium: 0, low: 0 }
  );
};
